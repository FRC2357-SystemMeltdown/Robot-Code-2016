// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveController> Robot::driveController;
std::shared_ptr<LaunchController> Robot::launchController;
std::shared_ptr<PixyController> Robot::pixyController;
std::shared_ptr<ElevatorController> Robot::elevatorController;
std::shared_ptr<TriggerController> Robot::triggerController;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveController.reset(new DriveController());
    launchController.reset(new LaunchController());
    pixyController.reset(new PixyController());
    elevatorController.reset(new ElevatorController());
    triggerController.reset(new TriggerController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	CameraServer::GetInstance()->SetQuality(50);
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();

	/*std::cout << "Robot: ECon: forward limit status = " << RobotMap::elevatorControllerWindowL->IsFwdLimitSwitchClosed() << std::endl;
	std::cout << "Robot: ECon: reverse limit status = " << RobotMap::elevatorControllerWindowR->IsRevLimitSwitchClosed() << std::endl;
	std::cout << "Robot: LCon: limit switch = " << RobotMap::launchControllerlowLimit->Get() << std::endl;
	std::cout << "Robot: ECon: pot = " << RobotMap::elevatorControllerWindowL->GetAnalogIn() << std::endl;*/

}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot)

