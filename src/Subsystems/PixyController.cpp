// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "PixyController.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/grabCamData.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

PixyController::PixyController() : Subsystem("PixyController"),
									pixy(), pkt(160,100,0,0)
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    pixyPan = RobotMap::pixyControllerPixyPan;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //pixyPan->
    PixyReset();


}

void PixyController::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.



/*double PixyController::autoCenter() {
	pkt = nullptr;
	try {
		pkt = pixy.readPacket(1);
	} catch (std::exception* e){
		e->what(); //Not quite sure how this transfers over...
	}
	try {
		objRatio = (pkt.Height/pkt.Width);
	} catch (std::exception& a) {
		std::cout << a.what() << std::endl;
		std::cout << "Object not being seen" << std::endl;
		return 0;
	}
	if(pkt != nullptr) {
		if((ratio - 0.1) <= (objRatio) && (ratio + 0.1) >= (objRatio)){
			if (pkt.X < 70 || pkt.X > 90){
				error = 80 - pkt.X;
				error /= 160;
				error /= 2;
			} else {
				error = 0;
			}
		} else if((objRatio) > (ratio + 0.1)){
			error = 0;
		} else {
			error = -error;
		}
	} else {
		error -= 0.05;
	}

	return error;
}*/

void PixyController::Update() {
	PixyPacket tempPkt = pixy.readPacket(1);
	if(tempPkt == PixyPacket::UNINITIALIZED){
		return;
	}
	pkt = tempPkt;
	distanceToTarget = (355.6 * focalLength * 200) / (pkt.Height * 6.35);
	std::cout << "Update: " << pkt.X << "," << pkt.Y << "," << pkt.Height << "," << pkt.Width << "," << distanceToTarget  << "," << pixyPan->GetAngle() << std::endl;
	// lock tilt servo in place or no servo at all?
	//go to center first then look for blobs
	// Distance = (knownWidth * focalLength) / pixelWidth

	//std::cout << pkt.X << "," << pkt.Y << "," << distanceToTarget << std::endl; // Read error value to determine what i need to do to turn servo.
}

void PixyController::PixyReset() {
	pixy.pixyReset();
	pixyPan->SetAngle(90.0);
}

int PixyController::GetBlockX(){
	return pkt.X;
}

int PixyController::GetBlockY(){
	return pkt.Y;
}

int PixyController::GetBlockHeight(){
	return pkt.Height;
}

int PixyController::GetBlockWidth(){
	return pkt.Width;
}

void PixyController::SetServoPanAngle(double angle) {
	pixyPan->SetAngle(angle);
}

float PixyController::GetServoPanAngle() {
	return pixyPan->GetAngle();
}
