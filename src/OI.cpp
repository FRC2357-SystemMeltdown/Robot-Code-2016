// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/controllerDrive.h"
#include "Commands/decreaseRPM.h"
#include "Commands/elevateLauncher.h"
#include "Commands/fireLauncher.h"
#include "Commands/grabCamData.h"
#include "Commands/increaseRPM.h"
#include "Commands/lowerLauncher.h"
#include "Commands/pickUpBall.h"
#include "Commands/readyLauncher.h"
#include "Commands/resetElevation.h"
#include "Commands/resetLauncher.h"
#include "Commands/retractBall.h"
#include "Commands/spinLauncherToRpm.h"
#include "Commands/stickDrive.h"



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    controller.reset(new Joystick(2));
    
    btnDecreaseRPM.reset(new JoystickButton(controller.get(), 5));
    btnDecreaseRPM->WhileHeld(new decreaseRPM());
    btnIncreaseRPM.reset(new JoystickButton(controller.get(), 6));
    btnIncreaseRPM->WhileHeld(new increaseRPM());
    //fireButton.reset(new JoystickButton(controller.get(), 6));
    //fireButton->WhileHeld(new fireLauncher());
    stickRight.reset(new Joystick(1));
    
    stickLeft.reset(new Joystick(0));
    

    // SmartDashboard Buttons
    SmartDashboard::PutData("decreaseRPM", new decreaseRPM());
    SmartDashboard::PutData("increaseRPM", new increaseRPM());
    SmartDashboard::PutData("retractBall", new retractBall());
    //SmartDashboard::PutData("lowerLauncher", new lowerLauncher());
    SmartDashboard::PutData("resetElevation: Home", new resetElevation(0));
    //SmartDashboard::PutData("elevateLauncher", new elevateLauncher());
    SmartDashboard::PutData("resetLauncher", new resetLauncher());
    SmartDashboard::PutData("fireLauncher", new fireLauncher());
    SmartDashboard::PutData("spinLauncherToRpm", new spinLauncherToRpm());
    SmartDashboard::PutData("readyLauncher", new readyLauncher());
    SmartDashboard::PutData("controllerDrive", new controllerDrive());
    SmartDashboard::PutData("stickDrive", new stickDrive());
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    SmartDashboard::PutData("grabCamData", new grabCamData());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    SmartDashboard::PutNumber("RPM", 0.0);
      //::GetNumber("RPM", 0.0);
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getstickLeft() {
   return stickLeft;
}

std::shared_ptr<Joystick> OI::getstickRight() {
   return stickRight;
}

std::shared_ptr<Joystick> OI::getcontroller() {
   return controller;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

float OI::getstickLeftY() {
	return stickLeft->GetY();
}

float OI::getstickRightY() {
	return stickRight->GetY();
}

float OI::getControllerLeftX() {
	return controller->GetRawAxis(0);
}

float OI::getControllerLeftY() {
	return controller->GetRawAxis(1);
}
bool OI::getControllerButton(uint32_t i){
	if(i <= 10 && i >= 1){
		if(controller->GetRawButton(i) == true)
		{
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
}
