// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <Commands/trackTarget.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

trackTarget::trackTarget(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pixyController.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void trackTarget::Initialize() {
	Robot::pixyController->PixyReset();
	Robot::pixyController->SetServoPanAngle(90.0);
}

// Called repeatedly when this Command is scheduled to run
void trackTarget::Execute() {
	// Resolution = 1280X x 800Y
	// center of goal is approx 7ft 4 in up from carpet
	// Distance = (knownWidth * focalLength) / pixelWidth
	/*float calculatedAngle;

	Robot::pixyController->Update();
	if(Robot::pixyController->distanceToTarget == 0){
		Robot::pixyController->distanceToTarget = 0.1;
		std::cout << "Receiving 0 value from pixy, returning 0.1" << std::endl;
	}
	calculatedAngle = asin(355.6/Robot::pixyController->distanceToTarget);
	//std::cout << (Robot::pixyController->pixyPan->GetAngle() + calculatedAngle) << std::endl;
	//Robot::pixyController->pixyPan->SetAngle(Robot::pixyController->pixyPan->GetAngle() + calculatedAngle);

	// X Range = 0-320 L->R
	// Y Range = 0-200 T->B
*/
	Robot::pixyController->Update();
	int x = Robot::pixyController->GetBlockX();
	if (x < 158) {
		Robot::pixyController->SetServoPanAngle(Robot::pixyController->GetServoPanAngle() - 1);
	} else if (x > 163) {
		Robot::pixyController->SetServoPanAngle(Robot::pixyController->GetServoPanAngle() + 1);
	}

}

// Make this return true when this Command no longer needs to run execute()
bool trackTarget::IsFinished() {
	int x = Robot::pixyController->GetBlockX();
	return abs(160 - x) < 5;
}

// Called once after isFinished returns true
void trackTarget::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void trackTarget::Interrupted() {
   End();
}
